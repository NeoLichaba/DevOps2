7 November 2022
------------------------------

1. Install Docker
-------------------------------

I encountered error when starting up Docker. The error read:


Hardware assisted virtualization and data execution protection must be enabled in the BIOS. See https://docs.docker.com/desktop/windows/troubleshoot/#virtualization

This can be fixed in BIOS setup. Thankfully, I came across this blog post and I quickly resolved my the issue. https://nerdschalk.com/how-to-enable-virtualization-in-bios-on-windows-11-or-10/. 
Take a look at that if you ever encounter the same issue. :)

Section 2 - Getting Started with Docker
------------------------------------------

2. Docker Usecase
-------------------------------
From the command prompt:

- Use docker --version to check Docker version. Ensure that it is 19 and above
- Run: docker run in28min/todo-rest-api-h2:1.0.0.RELEASE
  - pull from registry 
  - Spring Boot app launched
  - new manner in which application will be installed
- image is downloaded to machine and run as an application
- image = static version; bytes
- container - running version of your image/object
- check port on which it is running (i.e. port 5000), if site can't be reached, provide option
  - publish by running: docker run -p 5000:5000 in28min/todo-rest-api-h2:1.0.0.RELEASE
  - -p 5000:5000 => -p {HostPort}:{ContainerPort}
  - mapping container port to host port - bridge network
  - run localhost:5000/hello-world in browser 


4. Docker Concepts - Registry, Repository, Tag, Image and Containers
-----------------------------------------------------------------------
docker run in28min/todo-rest-api-h2:1.0.0.RELEASE

* Registry (Default: hub.docker.com)
- where repos exist
- hub.docker.com/r/in28min/todo-rest-api-h2
- name of repo


* Repository
- all versions of 
- hub.docker.com/r/in28min/todo-rest-api-h2
- contains repo name pulling from

* Tag
-  1.0.0.RELEASE - tag, version being used

5. Docker Images and Containers
------------------------------------------------------------------------

* Image

- docker images - shows images that are local 

* Containers
- docker run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
  - -d - run container in the background
- docker container ls - see which containers are running
- docker container ls - a - all containers shown irrespective of container

- docker run -p 5001:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE docker can run same version of app but different container 
- docker logs -f <first 5 digits from container> - check if running
  => 2 instances of 

- docker container stop <id> - stop docker container

7. Docker Architecture
------------------------------------------------------------------------

- Docker Client - responsible for docker daemon
- Docker Daemon - responsible for managing containers, local images and pulls and pushes images from registry if not available
		- process instructions to create images

- run from client:
  docker run -p 5000:5000 -d in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
  - sent to docker daemon, will go to registry and download image


8. Why Docker is Popular
------------------------------------------------------------------------

* Deployments using Docker
  Cloud deployment


9. Playing with Docker Images
------------------------------------------------------------------------
*  Tag, search, official versions, remove

- Taking multiple tags and putting it into one image
- docker run -p 5001:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE in28min/todo-rest-api-h2:latest
- run docker images
- latest - most recently released version of project
- latest also might not be the latest or might not even be present sometimes

- docker pull - downloads image to local, does not run
- docker pull mysql - official image
- docker search mysql - search for offical images 

- docker image - official image 
- docker image history <imageid> - check history of specific image
  - steps involved in creating image
  - instructions run to create image
  - file size and files added (i.e. jar file) 

- docker image inspect <imageid> 
  - tags
  - configs
  - entry point
  - env
  - folder structure

- docker image remove <imageid> - removes from local server


10. Playing with Docker Containers
------------------------------------------------------------------------

- docker container run -p 5000:5000 -d in28min/todo-rest-api-h2:1.0.0.RELEASE
  - creating container from image 
  - launched in detached mode

- docker container pause <imageid> - pauses container
- docker container unpause <imageid> - pauses container

- docker container inspect <imageid> 
  - code bindings
  - volumes

- docker container prune - removes all stopped containers
- docker container ls -a - running containers 

- stop => SIGTERM - graceful shutdown

- docker run -p 5000:5000 -d --restart=always in28min/todo-rest-api-h2:1.0.0.RELEASE
- always - restart docker container automatically launched

10. Playing with Docker Commands - stats, system
------------------------------------------------------------------------

- docker events - helps to see container events
- should there not be any activity, stop container and relaunch using docker run -p 5000:5000 -d in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
- docker top - checks which top process is running in a container
	     - docker top <imageid>
	     - all processes running in container can be seen; check command 

- docker stats - stats, metrics re: container
- to add in specific memory and CPU limits:
  - docker run -p 5001:5000 -m 512m --cpu-quota 5000 -d in28min/todo-rest-api-h2:0.0.1-SNAPSHOT
  - 512m - max of 512 MB of mem to be used
  - CPU-quota; 5000 = 5%
  - check download rate

- docker system df - all aspects managed by docker system manages


Section 3 - Importing Java Spring Boot Projects
-----------------------------------------------------

Section 4 - Importing Java Spring Boot Projects
-----------------------------------------------------

14. Building Docker Image - manual approach (Eclipse)

a * Build a JAR *
  - Maven Build - goals: clean package
  - in pom file, scroll to build - final name - specify the name, configuring for "filename"
  - after build, copy name of jar file
  - \target\hello-world-rest-api.jar
  
b * Setup pre-requisites for running the JAR; openjdk:8-jdk-alpine (based on alpine linux) *
  - ensure docker hub is open and connected
  - run image and copy jar file into container
  - cd into folder where jar is held
  - run docker run -dit openjdk:8-jdk-alpine, image not present, will pull image from docker and try run it
  - alpine - minimal Docker image based on Alpine Linux
  - image downloaded and container created
  - docker images to check if container created
  - docker container ls - check which container is running
  - -d = lets you run container in detached state, able to execute other demands
  - -i = interactive shell to running container
  - -t = --tty
  - it - allows you to run commands on a running container
  - docker container exec <containername> ls /tmp - temp to check what'a in the temp folder 

c * Copy the JAR *
  - docker container cp target/hello-world-rest-api.jar <containername>:/tmp
  - if command successfully executed, copied into running container
  - run docker container exec <containername> ls /tmp to check if file copied  

d * Run the JAR *
  - Save container as an image - docker container commit <containername> <repo name -doc>:manual1
  - commit - save
  - :manual1 - tag
  - run docker images to check images created; image exists
  - run image - docker run <reponame>:tag
  - docker run in28min/hello-world-rest-api:manual1 
  - specify file to run at start up
    - docker container commit (add start up command --change='') <containername> <nameofimage -in28min/hello-world-rest-api:manual2>
    - add start up command --change='CMD ["java","-jar","/tmp/hello..."]'
    
    - ran into an error: docker container commit requires at least 1 and at most 2 arguments. Replaced '' with "" instead.
    - docker run -p 8080:8080 in28min/hello-world-rest-api:manual2

    - ran into a /bin/sh: ... not found error when running the app to the port. This is due to Windows 10 not identifying bash/linux commands. To resolve:
      - saved the file using the following path:docker commit --change="CMD java -jar /tmp/hello-world-rest-api.jar <imagename> <new repo>
      - ran the the file using docker run -p 8080:8080... and it thankfully ran  

- To share image, give fellow user the following details:
  - image repo name - in28min/hello-world-rest-api
  - tag name - manual3


16. Use Dockerfile to Build Docker Image
--------------------------------------------

- Create Dockerfile in root - installed an extension (Docker Toolkit) from Eclipse Marketplace
- Specify instructions used to execute to create image:
  a) Create base image. From which image container to be created
     FROM openjdk:8-jdk-alpine
  b) Copy jar file and copy into image with same name
     ADD target/hello-world-rest-api.jar hello-world-rest-api.jar
  c) Set command to be run at start up
     ENTRYPOINT ["sh", "-c", "java -jar /hello-world-rest-api.jar"]
     - in shell, execute command ...java -jar, in root, call
     - first thing to be executed is java -jar...

In command prompt
- Create image
  - docker build -t in28min/hello-world-rest-api:dockerfile1 .
  - -t - tag
  - in28min/hello-world-rest-api - repo name
  - dockerfile1 - tag
  - dot(.) represents current folder - Build context
  
  - should return that image has been built and tagged
  - run container 
    - docker run -p 8080:8080 in28min/hello-world-rest-api:dockerfile1 
    - app should run successfully on port 8080

17. Understanding Docker Image Layers, Caching and Dockerfile
----------------------------------------------------------------

- Shows steps in image created: docker history in28min/hello-world-rest-api:dockerfile1 
  FROM - created a base image
  ADD - Added an entry point, it added a dockerfile size of 16.8mb
- adds metadata
- docker layers are cached - docker build -t in28min/hello-world-rest-api:dockerfile1 .
  - building another image with the same tag. Using already created image 
- EXPOSE 8080 - run on port 8080; port not published on port
- run build again
- only base image will be the same whilst the rest of the steps are not cached

- Make amendment to controller. Build a new jar file
- jar file has changed and thus a new layer was created - cached
- expose and entrypoint add metadata
- add - add data 
- env - environmental variables

19. Using Dockerfile Spotify plugin to create Docker images
------------------------------------------------------------------

- Build an entire image with one command - maven plugin
- integrates maven with docker
- inserted dependency in pom file 
- default - execute build image
- repo
- tag 
- built jar file
- image is also built and not just the jar
- plugin in allows you to integrate docker build as a part of maven built process
- makes use of layers created in cache
- run in port - docker run -p 8080:8080 in28min/hello-world-rest-api:0.0.1-SNAPSHOT
 
20. Create a generic reusable Dockerfile
--------------------------------------------------------------

- In Dockerfile, use wildcards
- FROM openjdk:8-jdk-alpine
  EXPOSE 8080
  ADD target/*.jar app.jar - wild card and general name
  ENTRYPOINT ["sh", "-c", "java -jar /hello-world-rest-api.jar"]
- run in console - docker run -p 8080:8080 in28min/hello-world-rest-api:0.0.1-SNAPSHOT


21. Improving Caching of Docker Images by Adding Libraries 
-------------------------------------------------------------------

- Creating cachable image layers
- Maven dependency plugin installed - (unpack) splits jar into individual components

FROM openjdk:8-jdk-alpine
ARG DEPENDENCY=target/dependency - variable to dependency folder
COPY ${DEPENDENCY}/BOOT-INF/lib /app/lib     - copy from one file image (app/lib)
COPY ${DEPENDENCY}/META-INF /app/META-INF    - 
COPY ${DEPENDENCY}/BOOT-INF/classes /app -    copy classes of file directly into folder
ENTRYPOINT ["java","-cp","app:app/lib/*","com.in28minutes.rest.webservices.restfulwebservices.RestfulWebServicesApplication"]
- run java main class 
- cp = class path 
- all libraries available in class path, run main class

- run build: docker build -t in28min/hello-w-r-a:dockerfile1 .

- image built 
- cache layer taken and built 
- lib directories use cache
- take cache layer and adding onto it
- pick up dependency in cache layer
- pick up many aspects from cache = good so when you push to docker hub - all images are pushed out
- only changed parts pushed to registry


22. Using JIB Plugin to create Docker Images
-------------------------------------------------------------------

- Dockerfile Maven from Spotify
- Dockerfile Maven Plugin from provides a clear separation between what the Dockerfile does and what the Spotify Dockerfile
  Maven plugin does
- Dockerfile is responsible for building the image and the Spotify Dockerfile
- Maven plugin is responsible for integrating the building of image with the Maven build process. 
- instructions are specified in the Dockerfile and the Spotify Maven plugin
- Other plugins that help with building images for your applications

- JIB - Mvn plugin for building Docker and OCI images for Java apps
      - no need for Dockerfile
      - current timestamps/creation time = NB
      - images should be reproducible
      - default time = epoch
      - in execution, during package phase we are trying to run a Docker build. Now just building the image
      - artifact id used as repo name and version is used as tag
      - jib identifies dockerfile does not exist and identifies main class
      - run docker history 01-hello-world-rest-api:0.0.1-SNAPSHOT
      - JIB uses distroless Java, dependencies are copied, resources and the classes
      - docker run -p 8080:8080 01-hello-world-rest-api:0.0.1-SNAPSHOT
      - Java specific
      - config tags, jvm options, main class, port for image

- OCI - Open container initiative
    
  
23. Using Fabric8 Docker Maven Plugin to create Docker Images
-----------------------------------------------------------------------

- 1st Maven plugin to integrate well with Dockerfile
- provides it's own config syntax used to create a Dockerfile
- Dockerfile specifies instructions to create an image
- External creation of dockerfile image is used as gives one control over the instructions

